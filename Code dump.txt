 <ul className='header-menu-list'>
                    {contacts.map((nav,index) => (
                    <li key={nav.id} className='header-li' style={index === contacts.length -1 ? {paddingTop:4} :  {padding:0}} >  
                    

                    <a href={`${nav.id}`}><img  src = {nav.img} alt= "tittelbilde" className='header-contacs-img' style={index === contacts.length -1 ? {height:55, width:55} :  {padding:0}}/></a>
                    </li>

                    ))}
                </ul>



-----------------------------------------------------


const [toggleMenu, setToggleMenu] = useState(false);
    return ( 

        <div className='header-navbar'>
            <div className='header-logo-div'>
                <a className='header-logo'>PlaceholderLogo</a>
            </div>
            <div className='header-navbar-div'>
                <ul className='header-menu-list'>
                    {contacts.map((nav,index) => (
                    <li key={nav.id} className='header-li' style={index === contacts.length -1 ? {paddingTop:4} :  {padding:0}} >  
                    

                    <a href={`${nav.id}`}><img  src = {nav.img} alt= "tittelbilde" className='header-contacs-img' style={index === contacts.length -1 ? {height:55, width:55} :  {padding:0}}/></a>
                    </li>

                    ))}
                </ul>

            <div className='header-menu-navbar'>
            {toggleMenu
          ? <MdClose color="#fff" size={27} onClick={() => setToggleMenu(false)} />
          : <MdMenu color="#fff" size={27} onClick={() => setToggleMenu(true)} />}

                {toggleMenu && (

                <ul className='header-menu-navbar-list'>
                    {contacts.map((nav,index) => (
                    <li key={nav.id} className='header-navbar-list' style={index === contacts.length -1 ? {marginBottom:10} :  {marginBottom:4}} >  
                    

                    <a href={`${nav.id}`}>{nav.title}</a>
                    </li>

                    ))}
                </ul>


                )}
              </div>

            </div>
</div>








------------------------------------------------------------


 useEffect  (() => {

        const canvas  = canvasRef.current;
        
        if(!canvas)return;

        const context = canvas.getContext('2d');

        if(!context)return;
        

       // context.fillStyle = 'red';

     //   context.fillRect(0,0,100,100);
       // context.strokeRect(100,100,50,50);

       const camera = new pc.Entity('camera');

        
    }
    
    
    , []);
----------------------------------
//const canvasRef  = useRef<HTMLCanvasElement | null >(null);
    const [hovered, setHover] = useState(false);
    const [active, setActive] = useState(false);
    const geometry = new THREE.BoxGeometry(2  , 2, 2);
    const material = new THREE.MeshStandardMaterial( { color: 0xffff00 } );
    const boxRef = new THREE.Mesh( geometry, material );
    
    useFrame( (state, delta)=> {
        if(!boxRef.current){
            return;
        }
        boxRef.current.rotation.x += 0.0005;
        boxRef.current.rotation.y += 0.001;
        boxRef.scale.x = 1000;

        });
    
    
    return (
       
            <mesh ref={boxRef} 
            scale={active ? 2 : 1}
            onClick={(event) => setActive(!active)}
            onPointerOver={(event) => setHover(true)}
            onPointerOut={(event) => setHover(false)}

            
            >
                <boxGeometry args={[1,1,1]}/>
                <meshStandardMaterial color={hovered ? 'hotpink' : 'orange'} />
            </mesh>
            );




export default function Box (){

 return ( 
    
    <div className="canvas-box section__padding">
    <Canvas className="test">
        
        <ambientLight/>
        <pointLight position= {[5,5,5]}/>
        
        <Cube position={[-1.2, 1 , -1]}/>
    </Canvas>
    </div>
 )
    
};

-------------------
    //const canvasRef  = useRef<HTMLCanvasElement | null >(null);
    const [hovered, setHover] = useState(false);
    const [active, setActive] = useState(false);
    const geometry = new THREE.BoxGeometry(2  , 2, 2);
    const material = new THREE.MeshStandardMaterial( { color: 0xffff00 } );
    const boxRef = new THREE.Mesh( geometry, material );
    
    useFrame( (state, delta)=> {
        if(!boxRef.current){
            return;
        }
        boxRef.current.rotation.x += 0.0005;
        boxRef.current.rotation.y += 0.001;
        boxRef.scale.x = 1000;

        });
--------------------
   //SCENE 
     const scene = new THREE.Scene();
 
     const camera = new THREE.PerspectiveCamera(75, 1000/25,0.1, 1000 );
     //Render
     const renderer  = new THREE.WebGLRenderer();
 
     const boxGeometry = new THREE.BoxGeometry(1,1,1);
 
 
     const material = new THREE.MeshBasicMaterial({
         color: "red",
     });
     const box = new THREE.Mesh(boxGeometry, material);
     scene.add(box);
 
     renderer.setSize(width, height);
     renderer.setPixelRatio(window.devicePixelRatio);
     document.body.appendChild(renderer.domElement); 
     
 
     renderer.render(scene , camera);
     
     //GEOMETRI
 
 
 
     //METRIALE
         */

---------------------------------------



import {useEffect, useRef, useState, Component} from 'react'
import React from 'react'
import { languages } from "../../constants"
import "./Box.css"
import $ from 'jquery'

class Cube extends  Component  {

    constructor(props){
        super(props)
    }
    componentDidMount = ()=> {
        $(document).ready(function (){
            if(!$("#mycanvas").tagcanvas({
                textColour: "#08fdd8",
                outlineColour: "transparent",
                reverse: true,
                depth: 0.8,
                maxSpeed: 0.05,
                weight: true, 
                
            }, "tags")){
                $("#myCanvasContainer");
            }
        
        })
            
            
        }
        
        
        render(){
            return (
                <div className='skill-sphere'>
                
                <div  className='canvas-container' id="myCanvasContainer">
                    <canvas width="300" height="300" id="myCanvas">
                    <ul>
                    
                        {languages.map (language =>(
                            <li><a href=""> {language}</a> </li>
                            ))}
                    </ul>
                    </canvas>
                </div>
        </div>
          
          );
        } 
 }

 
 export default  Cube;